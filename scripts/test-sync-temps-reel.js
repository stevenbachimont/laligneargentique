import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testSyncTempsReel() {
  try {
    console.log('üß™ Test de synchronisation en temps r√©el...');
    
    // Test 1: V√©rifier l'√©tat initial
    console.log('\n1Ô∏è‚É£ √âtat initial:');
    const baladeInitiale = await prisma.balade.findUnique({ where: { id: 1 } });
    console.log(`   Balade 1 - Places disponibles: ${baladeInitiale?.placesDisponibles}`);
    
    // Test 2: R√©server une place
    console.log('\n2Ô∏è‚É£ R√©servation d\'une place...');
    await prisma.balade.update({
      where: { id: 1 },
      data: { placesDisponibles: baladeInitiale.placesDisponibles - 1 }
    });
    
    const baladeApresReservation = await prisma.balade.findUnique({ where: { id: 1 } });
    console.log(`   Balade 1 - Places apr√®s r√©servation: ${baladeApresReservation?.placesDisponibles}`);
    
    // Test 3: Attendre et v√©rifier la persistance
    console.log('\n3Ô∏è‚É£ V√©rification de la persistance...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const baladeVerification = await prisma.balade.findUnique({ where: { id: 1 } });
    console.log(`   Balade 1 - Places apr√®s v√©rification: ${baladeVerification?.placesDisponibles}`);
    
    // Test 4: Remettre les places initiales
    console.log('\n4Ô∏è‚É£ Remise des places initiales...');
    await prisma.balade.update({
      where: { id: 1 },
      data: { placesDisponibles: baladeInitiale.placesDisponibles }
    });
    
    const baladeFinale = await prisma.balade.findUnique({ where: { id: 1 } });
    console.log(`   Balade 1 - Places finales: ${baladeFinale?.placesDisponibles}`);
    
    console.log('\nüéâ Test de synchronisation termin√© !');
    console.log('üí° Maintenant, v√©rifiez dans le navigateur que les places se mettent √† jour automatiquement.');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testSyncTempsReel();
