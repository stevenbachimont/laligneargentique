import { render, screen } from '@testing-library/svelte';
import { describe, it, expect, vi } from 'vitest';
import Page from './+page.svelte';

// Mock de window.open
Object.defineProperty(window, 'open', {
  value: vi.fn(),
  writable: true
});

describe('/photographie/argentique', () => {
  it('affiche le titre principal', async () => {
    render(Page);
    
    await new Promise(resolve => setTimeout(resolve, 100));
    
    expect(screen.getByRole('heading', { name: 'La ligne Argentique' })).toBeInTheDocument();
  });

  it('affiche le sous-titre', async () => {
    render(Page);
    
    await new Promise(resolve => setTimeout(resolve, 100));
    
    expect(screen.getByText(/D√©couvrez Nantes √† travers l'objectif d'un appareil photo argentique ancien/)).toBeInTheDocument();
  });

  it('affiche la section pr√©sentation', async () => {
    render(Page);
    
    await new Promise(resolve => setTimeout(resolve, 100));
    
    expect(screen.getByRole('heading', { name: 'Une exp√©rience photographique unique' })).toBeInTheDocument();
    expect(screen.getByText(/Je vous propose des balades photographiques guid√©es/)).toBeInTheDocument();
  });

  it('affiche les fonctionnalit√©s', async () => {
    render(Page);
    
    await new Promise(resolve => setTimeout(resolve, 100));
    
    expect(screen.getByText('Appareils fournis')).toBeInTheDocument();
    expect(screen.getByText('Techniques enseign√©es')).toBeInTheDocument();
    expect(screen.getByText('Lieux insolites')).toBeInTheDocument();
    expect(screen.getByText('Groupe limit√©')).toBeInTheDocument();
  });

  it('affiche toutes les balades programm√©es', async () => {
    render(Page);
    
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // V√©rifier qu'il y a des balades affich√©es
    const baladeCards = screen.getAllByText(/Architecture m√©di√©vale|Street Art|Nature en ville/);
    expect(baladeCards.length).toBeGreaterThan(0);
    
    // V√©rifier que les √©l√©ments de base sont pr√©sents
    const lieuElements = screen.getAllByText(/üìç/);
    const heureElements = screen.getAllByText(/üïê/);
    const prixElements = screen.getAllByText(/üí∞/);
    
    expect(lieuElements.length).toBeGreaterThan(0); // Emoji de lieu
    expect(heureElements.length).toBeGreaterThan(0); // Emoji d'heure
    expect(prixElements.length).toBeGreaterThan(0); // Emoji de prix
  });

  it('affiche les dates et heures des balades', async () => {
    render(Page);
    
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // V√©rifier que les heures sont affich√©es (avec l'emoji üïê)
    const heureElements = screen.getAllByText(/üïê/);
    expect(heureElements.length).toBeGreaterThan(0);
    
    // V√©rifier qu'il y a au moins une heure affich√©e
    const heures = heureElements.map(el => el.textContent);
    expect(heures.some(text => text && /\d{1,2}:\d{2}/.test(text))).toBe(true);
  });

    it('affiche le nombre de places disponibles', async () => {
    render(Page);

    await new Promise(resolve => setTimeout(resolve, 100));

    // V√©rifier que les places disponibles sont affich√©es
    // Utiliser une regex pour capturer n'importe quel nombre de places
    const placesElements = screen.getAllByText(/places disponibles/);
    expect(placesElements.length).toBeGreaterThan(0);
    
    // V√©rifier qu'il y a au moins une balade avec des places disponibles
    const placesText = placesElements.map(el => el.textContent);
    expect(placesText.some(text => text && text.includes('places disponibles'))).toBe(true);
  });

    it('affiche les boutons de r√©servation avec le bon √©tat', async () => {
    render(Page);
    
    await new Promise(resolve => setTimeout(resolve, 100));

    // V√©rifier qu'il y a des boutons de r√©servation
    const reserveButtons = screen.getAllByRole('button', { name: 'R√©server' });
    expect(reserveButtons.length).toBeGreaterThan(0);
    
    // V√©rifier que tous les boutons "R√©server" sont activ√©s
    reserveButtons.forEach(button => {
      expect(button).not.toBeDisabled();
    });
    
    // V√©rifier les messages de statut
    expect(screen.getAllByText('Inscriptions ouvertes').length).toBeGreaterThan(0);
  });

  it('affiche les ic√¥nes des fonctionnalit√©s', async () => {
    render(Page);
    
    await new Promise(resolve => setTimeout(resolve, 100));
    
    expect(screen.getByText('üì∑')).toBeInTheDocument();
    expect(screen.getByText('üéØ')).toBeInTheDocument();
    expect(screen.getByText('üèõÔ∏è')).toBeInTheDocument();
    expect(screen.getByText('üë•')).toBeInTheDocument();
  });

  it('affiche les descriptions des fonctionnalit√©s', async () => {
    render(Page);
    
    await new Promise(resolve => setTimeout(resolve, 100));
    
    expect(screen.getByText(/Appareils photo argentiques restaur√©s/)).toBeInTheDocument();
    expect(screen.getByText(/Composition, exposition, d√©veloppement/)).toBeInTheDocument();
    expect(screen.getByText(/D√©couverte des quartiers historiques/)).toBeInTheDocument();
    expect(screen.getByText(/Maximum 5 participants par balade pour un accompagnement personnalis√©/)).toBeInTheDocument();
  });
});
